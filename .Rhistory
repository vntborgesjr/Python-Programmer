import csv
reticulate::repl_python()
reticulate::repl_python()
csvfile = open("Datasets/cta_station.csv", mode ="r")
cta_stations = []
for row in csv.reader(csvfile):
cta_stations.append(row)
quit()
csvfile.close()
import csv
csvfile = open("Datasets/cta_station.csv", mode ="r")
cta_stations = []
for row in csv.reader(csvfile):
cta_stations.append(row)
quit()
csvfile.close()
stations = []
date = []
rides = []
for row in cta_stations:
stations.append(row[1])
date.append(row[2])
rides.append(row[4])
quit()
stations = []
date = []
rides = []
for row in cta_stations:
stations.append(row[1])
date.append(row[2])
rides.append(row[4])
quit()
entries = list(zip(date, stations, rides))
date1 = []
rides1 = []
print(date[0])
print(rides[0])
date1 = date.pop(0)
print(date1[0])
print(date[0])
?.pop
?list
rides.pop(0)
print(rides)
int(rides[0])
rides1 = []
for str in rides:
rides1.append(int(str))
quit()
print(rides1:10)
print(rides1[:10])
entries1 = list(zip(date, rides1))
from collections import OrderedDict
ridership_date = OrderedDict()
for date, riders in entries1:
# If a key does not exist in ridership_date, set it to 0
if date not in ridership_date:
ridership_date[date] = 0
# Add riders to the date key in ridership_date
ridership_date[date] += riders
quit()
print(list(ridership_date.items())[:31])
ridership_date.keys()
ridership_date.keys()[0]
list(ridership_date.keys())[0]
print(list(ridership_date.keys())[0])
print(list(ridership_date.popitem()))
print(list(ridership_date.items())[:31])
print(list(ridership_date.popitem(last = False)))
print(ridership_date.popitem(last = False))
print(list(ridership_date.keys())[-1])
print(list(ridership_date.items())[:31])
print(list(ridership_date.keys())[0])
print(list(ridership_date.keys())[-1])
print(ridership_date.popitem(last = False))
print(ridership_date.popitem())
from collections import namedtuple
DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])
labeled_entries = []
print(entries[0])
stations.pop(0)
entries2 = list(zip(date, stations, rides))
DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])
# Create the empty list: labeled_entries
labeled_entries = []
# Iterate over the entries list
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
details = DateDetails(date['date'],
stop['stop'],
riders['riders'])
labeled_entries.append(details)
quit()
DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])
labeled_entries = []
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
DateDetails = DateDetails(date['date'],
stop['stop'],
riders['riders'])
labeled_entries.append(DateDetails)
quit()
print(labeled_entries[:5])
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
DateDetails = DateDetails(date,
stop,
riders)
labeled_entries.append(DateDetails)
quit()
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
details = DateDetails(date,
stop,
riders)
labeled_entries.append(details)
quit()
DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])
labeled_entries = []
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
details = DateDetails(date,
stop,
riders)
labeled_entries.append(details)
quit()
print(labeled_entries[:5])
entries2
date
stations = []
date = []
rides = []
for row in cta_stations:
stations.append(row[1])
date.append(row[2])
rides.append(row[4])
quit()
date[0]
date.pop(0)
date[0]
date.pop(0)
stations = []
date = []
rides = []
for row in cta_stations:
stations.append(row[1])
date.append(row[2])
rides.append(row[4])
quit()
date.pop(0)
rides.pop(0)
stations.pop(0)
entries2 = list(zip(date, stations, rides))
entries[0]
entries2[0]
DateDetails = namedtuple('DateDetails', ['date', 'stop', 'riders'])
labeled_entries = []
for date, stop, riders in entries2:
# Append a new DateDetails namedtuple instance for each entry to
#labeled_entries
details = DateDetails(date,
stop,
riders)
labeled_entries.append(details)
quit()
# Print the first 5 items in labeled_entries
print(labeled_entries[:5])
for item in labeled_entries:
# Print each item's stop
print(item.stop)
# Print each item's date
print(item.date)
# Print each item's riders
print(item.riders)
quit()
for item in labeled_entries[:20]:
# Print each item's stop
print(item.stop)
for item in labeled_entries[:20]:
# Print each item's stop
print(item.stop)
# Print each item's date
print(item.date)
# Print each item's riders
print(item.riders)
quit()
import csv
csvfile2 = open("Datasets/cta_summary.csv", mode = 'r')
cta_summary = []
for row in csv.reader(csvfile2):
cta_summary.append(row)
quit()
dates_list = []
for date in cta_summary:
dates_list.append(date[0])
quit()
print(dates_list)
dates_list.pop(0)
dates_list
dates_list[0]
from datetime import datetime
?datetime
for date_str in dates_list:
# Convert each date to a datetime object: date_dt
date_dt = datetime.strptime(date_str, '%m/%d/%Y')
quit()
print(date_dt)
print(date_dt)
print(date_dt[0])
datetimes_list = []
for date_str in dates_list:
# Convert each date to a datetime object: date_dt
datetimes_list.append(datetime.strptime(date_str, '%m/%d/%Y'))
quit()
print(date_dt[0])
print(datetimes_list[0])
print(datetimes_list)
for item in datetimes_list[:10]:
# Print out the record as a string in the format of 'MM/DD/YYYY'
print(datetime.strftime(datetimes_list))
# Print out the record as an ISO standard string
print(datetime.isoformat(datetimes_list))
quit()
for item in datetimes_list[:10]:
# Print out the record as a string in the format of 'MM/DD/YYYY'
print(datetime.strftime(item))
# Print out the record as an ISO standard string
print(datetime.isoformat(item))
quit()
for item in datetimes_list[:10]:
# Print out the record as a string in the format of 'MM/DD/YYYY'
print(datetime.strftime(item, '%m/%d/%Y'))
# Print out the record as an ISO standard string
print(datetime.isoformat(item))
quit()
from datetime import defaultdict
import defaultdict
monthly_total_rides = defaultdict(int)
daily_summaries = []
for row in csv.reader(csvfile2):
daily_summaries.append(row)
quit()
daily_summaries.pop(0)
for row in csv.reader(csvfile2):
daily_summaries.append(row)
quit()
csvfile2.close()
daily_summaries.pop(0)
daily_summaries
csvfile2 = open("Datasets/cta_summary.csv", mode = 'r')
for row in csv.reader(csvfile2):
daily_summaries.append(row)
quit()
csvfile2.close()
daily_summaries
daily_summaries.pop(0)
daily_summaries[0]
monthly_total_rides = defaultdict(int)
from collections import defaultdict
monthly_total_rides = defaultdict(int)
for daily_summary in daily_summaries:
# Convert the service_date to a datetime object
service_datetime = datetime.strptime(daily_summary[0], '%m/%d/%Y')
# Add the total rides to the current amount for the month
monthly_total_rides[service_datetime.month] += int(daily_summary[4])
quit()
csvfile2.close()
print(daily_summaries)
