import panda as pd
reticulate::repl_python()
from matplotlib import pyplot
import pandas as pd
df = pd.read_csv('random.csv')
import pandas as pd
from matplotlib import pyplot
source python/bin/activate
import pandas as pd
from matplotlib import pyplot
install.packages("reticulate")
exit()
Sys.setenv(RETICULATE_PYTHON = "python/bin/python")
print(hours)
reticulate::repl_python()
import pandas as pd
from matplotlib import pyplot as plt
hours = pd.read_csv('Datasets/hours.csv', sep = ';')
print(hours)
hours = pd.read_csv('Datasets/hours.csv', sep = ';')
print(hours)
hours = pd.read_csv('Datasets/hours.csv', sep = ';')
exit
library(reticulate)
reticulate::repl_python()
import csv
csvfile0 = open("Datasets/baby_names.csv", mode ='r')
records = []
for row in csv.reader(csvfile):
records.append(row)
quit()
for row in csv.reader(csvfile0):
records.append(row)
quit()
print(records)
csvfile0.close()
csvfile0 = open("Datasets/baby_names.csv", mode ='r')
records = []
for row in csv.reader(csvfile0):
records.append(row)
quit()
print(records)
csvfile0.close()
csvfile0 = open("Datasets/baby_names.csv", mode ='r')
records = []
print(records)
for row in csv.reader(csvfile0):
records.append(row)
quit()
print(records)
csvfile0.close()
csvfile0 = open("Datasets/baby_names.csv", mode ='r')
records = []
for row in csv.reader(csvfile0):
records.append(row)
quit()
print(records)
csvfile0.close()
print(records[3])
print(records[3][3])
for row in records:
# Add the name to the list
baby_names.append(row[3])
quit()
baby_names = []
for row in records:
# Add the name to the list
baby_names.append(row[3])
quit()
for name in sorted(baby_names):
# Print each name
print(name)
quit()
girl_names = []
boy_names = []
print(records[0])
print(records[1])
for row in records:
if row[1] == 'FEMALE':
girl_names.append(row[3])
elif row[1] == 'MALE'
boy_names.append(row[3])
quit()
print(girl_names)
print(boy_names)
girl_names = []
boy_names = []
print(records[1])
for row in records:
if row[1] == 'FEMALE':
girl_names.append(row[3])
elif row[1] == 'MALE':
boy_names.append(row[3])
quit()
print(girl_names)
print(boy_names)
pairs = list(zip(girl_names, boy_names))
for idx, pair in enumerate(pairs) :
# Unpack pair: girl_name, boy_name
girl_name, boy_name = pair
# Print the rank and names associated with each rank
print('Rank {}: {} and {}'.format(idx, girl_name, boy_name))
quit()
records[0][0]
baby_names_2011 = set([])
baby_names_2011
baby_names_2014 = set()
baby_names_2014
for row in records:
if row[0] == 2011:
baby_names_2011.add(row[3])
elif row[0] == 2014:
baby_names_2014.add(row[3])
quit()
print(baby_names_2011)
for row in records:
if row[0] == "2011":
baby_names_2011.add(row[3])
elif row[0] == "2014":
baby_names_2014.add(row[3])
quit()
print(baby_names_2011)
print(baby_names_2014)
csvfile0.close()
female_baby_names_2012 = {}
print(records[0])
for row in records:
if row[0] == "2012" and row[1] == "FEMALE":
female_baby_names_2012[row[5]] = row[3]
quit()
print(female_baby_names_2012)
names_by_rank = {}
for rank, name in female_baby_names_2012.items() :
# Add each name to the names_by_rank dictionary using rank as the key
names_by_rank[rank] = name
quit()
for rank in sorted(names_by_rank, reverse = True)[:10]:
# Print each item
print(names_by_rank[rank])
quit()
print(cta_stations)
import csv
csvfile = open("Datasets/cta_station.csv", mode ="r")
cta_stations = []
for row in csv.reader(csvfile):
cta_stations.append(row)
quit()
csvfile.close()
print(cta_stations)
stations = []
for row in cta_stations:
stations.append(row[1])
quit()
print(stations)
import Counter from collections
from collections import Counter
print(station[:9])
print(stations[:9])
print(stations[:10])
station_count = Counter(stations)
print(station_count)
station_count = Counter(stations)
print(station_count.most_common(5))
print(cta_stations)
entrie = []
pairs = list(zip(girl_names, boy_names))
print(pairs)
date = []
print(cta_stations[0])
stationname = []
rides = []
date = []
rides = []
for row in cta_stations:
date.append(row[2])
rides.append(row[4])
quit()
entries = list(zip(date, stations, rides))
print(entries)
for date, stop, riders in entries:
# Check to see if date is already in the ridership dictionary
if date not in ridership:
# Create an empty list for any missing date
ridership[date] = []
# Append the stop and riders as a tuple to the date keys list
ridership[date].append(stop, riders)
quit()
print(ridership['03/09/2016'])
ridership = {}
for date, stop, riders in entries:
# Check to see if date is already in the ridership dictionary
if date not in ridership:
# Create an empty list for any missing date
ridership[date] = []
# Append the stop and riders as a tuple to the date keys list
ridership[date].append(stop, riders)
quit()
for date, stop, riders in entries:
# Check to see if date is already in the ridership dictionary
if date not in ridership:
# Create an empty list for any missing date
ridership[date] = []
# Append the stop and riders as a tuple to the date keys list
ridership[date].append((stop, riders))
quit()
print(ridership['03/09/2016'])
import defaultdict from collections
from collections import defaultdict
for date, stop, riders in entries:
# Use the stop as the key of ridership and append the riders to its value
ridership[stop].append(riders)
quit()
ridership = defaultdict(list)
for date, stop, riders in entries:
# Use the stop as the key of ridership and append the riders to its value
ridership[stop].append(riders)
quit()
print(list(ridership.items())[:10])
from collections import OrderedDict
ridership_date = OrderedDict()
print(riders)
print(rides)
print(int(rides))
print(int('1499;;'))
print(int('1499'))
print(riders)
print(type(riders))
print(type(rides))
csvfile.close()
csvfile = open("Datasets/cta_station.csv", mode ="r")
cta_stations = []
for row in csv.reader(csvfile):
cta_stations.append(row)
quit()
csvfile.close()
print(cta_stations)
date = []
rides = []
for row in cta_stations:
date.append(row[2])
rides.append(row[4])
quit()
entries = list(zip(date, stations, rides))
print(entries)
riders = []
for str in rides:
riders.append(int(row[4]))
quit()
print(riders)
riders = []
for str in rides:
riders.append(int(str))
quit()
print(riders)
rides
print(int(rides[-1]))
print(int(rides[1]))
for str in rides:
integer = []
integer = int(str)
riders.append(integer)
quit()
print(riders)
print(rides)
riders = int(rides)
riders = int(rides[:len(rides)])
len(rides)
int(rides[0])
rides[0]
rides[1]
int(rides[1])
int(rides[1:10])
print(date[0])
date1 = date.pop(0)
print(date1[0])
print(date1)
print(daily_summaries)
reticulate::repl_python()
print(daily_summaries)
import csv
csvfile2 = open("Datasets/cta_summary.csv", mode = 'r')
daily_summaries = []
for row in csv.reader(csvfile2):
daily_summaries.append(row)
quit()
csvfile2.close()
daily_summaries.pop(0)
print(daily_summaries)
csvfile2 = open("Datasets/cta_summary.csv", mode = 'r')
daily_summaries = []
for row in csv.reader(csvfile2):
daily_summaries.append(row)
quit()
csvfile2.close()
daily_summaries.pop(0)
print(daily_summaries)
reticulate::repl_python()
reticulate::repl_python()
import csv
csvfile = open('Datasets/crime_sampler.csv', mode = 'r')
crime_data = []
for row in csv.reader(csvfile):
# Append the date, type of crime, location description, and arrest
crime_data.append((row[0], row[2], row[4], row[5]))
quit()
for row in csv.reader(csvfile):
# Append the date, type of crime, location description, and arrest
crime_data.append((row[0], row[2], row[4], row[5]))
quit()
csvfile.close()
csvfile5 = open('Datasets/crime_sampler.csv', mode = 'r')
crime_data = []
for row in csv.reader(csvfile):
# Append the date, type of crime, location description, and arrest
crime_data.append((row[0], row[2], row[4], row[5]))
quit()
for row in csv.reader(csvfile5):
# Append the date, type of crime, location description, and arrest
crime_data.append((row[0], row[2], row[4], row[5]))
quit()
csvfile5.close()
csvfile = open('Datasets/crime_sampler.csv', mode = 'r')
crime_data = []
for row in csv.reader(csvfile):
# Append the date, type of crime, location description, and arrest
crime_data.append((row[0], row[2], row[4], row[5]))
quit()
crime_data.pop(0)
print(crime_data[:10])
csvfile.close()
csvfile.detach()
csvfile.close()
import csv
from collections import defaultdict
from datetime import datetime
csvfile = open('Datasets/crime_sampler.csv', mode = 'r')
crimes_by_district = defaultdict(list)
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row['District']
# Append the rest of the data to the list for proper district in crimes_by_district
district[crimes_by_district].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row[7]
# Append the rest of the data to the list for proper district in crimes_by_district
district[crimes_by_district].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop['District']
# Append the rest of the data to the list for proper district in
# crimes_by_district
district[crimes_by_district].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop['District']
# Append the rest of the data to the list for proper district in
# crimes_by_district
district['crimes_by_district'].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop[7]
# Append the rest of the data to the list for proper district in
# crimes_by_district
district[crimes_by_district].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop('District')
# Append the rest of the data to the list for proper district in
# crimes_by_district
district[crimes_by_district].append(row)
quit()
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop(7)
# Append the rest of the data to the list for proper district in
# crimes_by_district
district[crimes_by_district].append(row)
quit()
?.pop
?dictionary
?dict
for row in csv.DictReader(csvfile):
# Pop the district from each row: district
district = row.pop('District')
# Append the rest of the data to the list for proper district in crimes_by_district
crimes_by_district[district].append(row)
quit()
reticulate::repl_python()
library(reticulate)
reticulate::repl_python()
yes
reticulate::repl_python()
yes
library(reticulate)
reticulate::repl_python()
reticulate::repl_python()
sudo pip install scipy
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
temperatures_srt = temperatures_ind.sort_index()
reticulate::repl_python()
